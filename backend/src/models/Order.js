import mongoose from 'mongoose';
const { Schema, model, Types } = mongoose;

/**
 * Student Info Schema - Stores student-related information
 * 
 * This schema stores student details as per the requirements:
 * - name: Student name
 * - id: Student identifier
 * - email: Student email address
 */
const studentInfoSchema = new Schema(
  {
    name: { type: String, required: true },
    id: { type: String, required: true },
    email: {
      type: String,
      required: true,
      match: /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    }
  },
  {
    _id: false
  }
);

/**
 * Order Schema - Implements the Order Schema as specified in the assessment document
 * 
 * This schema stores order-related information as per the requirements:
 * - _id: Automatically generated by MongoDB (Object_id)
 * - school_id: Identifier for the school (String/Object_id)
 * - trustee_id: Identifier for the trustee (String/Object_id)
 * - student_info: Object containing student details (name, id, email)
 * - gateway_name: Name of the payment gateway used
 * 
 * Additional fields for comprehensive order management:
 * - amount: Payment amount
 * - currency: Currency code (default: INR)
 * - status: Current order status
 * - created_at: Timestamp of order creation
 */
const orderSchema = new Schema(
  {
    school_id: {
      type: Types.ObjectId,
      required: true,
      index: true, // Indexed for faster queries as mentioned in assessment
    },
    trustee_id: {
      type: Types.ObjectId,
      required: true,
    },
    student_info: {
      type: studentInfoSchema,
      required: true,
    },
    gateway_name: {
      type: String,
      required: true,
    },
    amount: {
      type: Number,
      required: true,
    },
    currency: {
      type: String,
      required: true,
    },
    status: {
      type: String,
      enum: ['pending', 'completed', 'success', 'failed', 'cancelled'],
      default: 'pending',
    },
  },
  {
    timestamps: true, // Adds createdAt and updatedAt fields automatically
    collection: 'orders'
  }
);

// Create indexes for fields that will be frequently queried
// This implements the indexing requirement from the assessment
orderSchema.index({ school_id: 1 });
orderSchema.index({ trustee_id: 1 });
orderSchema.index({ 'student_info.id': 1 });
orderSchema.index({ status: 1 });

export default model('Order', orderSchema);
